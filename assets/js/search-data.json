{
  
    
        "post0": {
            "title": "Top Down Introduction to BERT with HuggingFace and PyTorch",
            "content": "HuggingFace and PyTorch . HuggingFace Transformers is an excellent library that makes it easy to apply cutting edge NLP models. I will use their code, such as pipelines, to demonstrate the most popular use cases for BERT. I will also use pre-trained model weights hosted by HuggingFace. I will also use PyTorch in some examples. . !pip install transformers -q . |████████████████████████████████| 645kB 2.7MB/s |████████████████████████████████| 890kB 9.2MB/s |████████████████████████████████| 3.8MB 19.1MB/s |████████████████████████████████| 1.0MB 46.5MB/s Building wheel for sacremoses (setup.py) ... done . from transformers import pipeline, BertTokenizer, BertModel, BertForNextSentencePrediction, BertConfig import torch . What can I use BERT for? . Text classification . Probably the most popular use case for BERT is text classification. This means that we are dealing with sequences of text and want to classify them into discrete categories. . Here are some examples of text sequences and categories: . Movie Review - Sentiment: positive, negative | Product Review - Rating: one to five stars | Email - Intent: product question, pricing question, complaint, other | . Below is a code example of sentiment classification use case. . # Text classification - sentiment analysis nlp = pipeline(&quot;sentiment-analysis&quot;) print(nlp(&quot;This movie was great!&quot;)) print(nlp(&quot;I have just wasted 2 hours of my time.&quot;)) . [{&#39;label&#39;: &#39;POSITIVE&#39;, &#39;score&#39;: 0.6986343860626221}] [{&#39;label&#39;: &#39;NEGATIVE&#39;, &#39;score&#39;: 0.9613907337188721}] . Named Entity Recognition . Sometimes, we&#39;re not interested in the overall text, but specific words in it. Maybe we want to extract the company name from a report. Or the start and end date of hotel reservation from an email. . That means that we need to apply classification at the word level - well, actually BERT doesn&#39;t work with words, but tokens (more on that later on), so let&#39;s call it token classification. . There are existing pre-trained models for common types of named entities, like people names, organization names or locations. Let&#39;s see how this performs on an example text. Note that we will only print out the named entities, the tokens classified in the &#39;Other&#39; category will be ommitted. . # NER / token classification nlp = pipeline(&quot;ner&quot;) sequence = &quot;My name is Darek and I live in Warsaw.&quot; for token in nlp(sequence): print(token) . {&#39;word&#39;: &#39;Dare&#39;, &#39;score&#39;: 0.9987152218818665, &#39;entity&#39;: &#39;I-PER&#39;} {&#39;word&#39;: &#39;##k&#39;, &#39;score&#39;: 0.9988871812820435, &#39;entity&#39;: &#39;I-PER&#39;} {&#39;word&#39;: &#39;Warsaw&#39;, &#39;score&#39;: 0.9978176355361938, &#39;entity&#39;: &#39;I-LOC&#39;} . Question Answering . Wouldn&#39;t it be great if we simply asked a question and got an answer? That is certainly a direction where some of the NLP research is heading (for example T5). BERT can only handle extractive question answering. It means that we provide it with a context, such as a Wikipedia article, and a question related to the context. BERT will find for us the most likely place in the article that contains an answer to our question, or inform us that an answer is not likely to be found. . # Question Answering nlp = pipeline(&quot;question-answering&quot;) context = &quot;My name is Darek. I&#39;m Polish. I like to practice kungfu. My home is in Warsaw but I often travel to Berlin. My friend, Paul, lives in Canada.&quot; print(nlp(question=&quot;Where does Darek live?&quot;, context=context)) print(nlp(question=&quot;Where does Paul live?&quot;, context=context)) . {&#39;score&#39;: 0.8502292525232313, &#39;start&#39;: 71, &#39;end&#39;: 77, &#39;answer&#39;: &#39;Warsaw&#39;} {&#39;score&#39;: 0.9584999083856722, &#39;start&#39;: 134, &#39;end&#39;: 140, &#39;answer&#39;: &#39;Canada.&#39;} . Other use cases and fine-tuning . There are some other interesting use cases for transformer-based models, such as text summarization, text generation, or translation. BERT is not designed to do these tasks specifically, so I will not cover them here. . The examples above are based on pre-trained pipelines, which means that they may be useful for us if our data is similar to what they were trained on. Very often, we will need to fine-tune a pretrained model to fit our data or task. This is much more efficient than training a whole model from scratch, and with few examples we can often achieve very good performance. . To be able to do fine-tuning, we need to understand a bit more about BERT. . What are the inputs to BERT, and what comes out of it? . Let&#39;s start by treating BERT as a black box. The minimum that we need to understand to use the black box is what data to feed into it, and what type of outputs to expect. You can build on top of these outputs, for example by adding one or more linear layers. You can then fine-tune your custom architecture on your data. . Tokenization . Before you feed your text into BERT, you need to turn it into numbers. That&#39;s the role of a tokenizer. Some tokenizers split text on spaces, so that each token corresponds to a word. That would result however in a huge vocabulary, which makes training a model more difficult, so instead BERT relies on sub-word tokenization. Let&#39;s see how it works in code. . Each pre-trained model comes with a pre-trained tokenizer (we can&#39;t separate them), so we need to download it as well. Let&#39;s use it then to tokenize a line of text and see the output. . tokenizer = BertTokenizer.from_pretrained(&#39;bert-base-uncased&#39;) . . text = &#39;I like to practice kungfu.&#39; tokens = tokenizer.encode(text) print(tokens) . [101, 1045, 2066, 2000, 3218, 18577, 11263, 1012, 102] . Each token is a number that corresponds to a word (or subword) in the vocabulary. The most frequent words are represented as a whole word, while less frequent words are divided in sub-words. That ensures that we can map the entire corpus to a fixed size vocabulary without unknown tokens (in reality, they may still come up in rare cases). Let&#39;s see the length of our model&#39;s vocabulary, and how the tokens corresponds to words. . print(f&#39;Length of BERT base vocabulary: {len(tokenizer.vocab)}&#39;) print(f&#39;Text: {text}&#39;) for t in tokens: print(f&#39;Token: {t}, subword: {tokenizer.decode([t])}&#39;) . Length of BERT base vocabulary: 30522 Text: I like to practice kungfu. Token: 101, subword: [CLS] Token: 1045, subword: i Token: 2066, subword: like Token: 2000, subword: to Token: 3218, subword: practice Token: 18577, subword: kung Token: 11263, subword: ##fu Token: 1012, subword: . Token: 102, subword: [SEP] . In the example, you can see how the tokenizer split a less common word &#39;kungfu&#39; into 2 subwords: &#39;kung&#39; and &#39;##fu&#39;. The &#39;##&#39; characters inform us that this subword occurs in the middle of a word. BERT tokenizer also added 2 special tokens for us, that are expected by the model: [CLS] which comes at the beginning of every sequence, and [SEP] that comes in the end, or optionally also in the middle, if we feed two sequences into the model. Another example of special token is [PAD], we need to use it if we combine multiple examples in a batch, because BERT expects each example in a batch to have the same amount of tokens, so we need to pad shorter sequences. . Outputs . Let&#39;s download a pretrained model now, run our text through it, and see what comes out. We will first need to convert the tokens into tensors, and add the batch size dimension (here, we will work with batch size 1). . model = BertModel.from_pretrained(&#39;bert-base-uncased&#39;) . inputs = torch.tensor(tokens).unsqueeze(0) # Batch size 1 outputs = model(inputs) print(f&#39;output type: {type(outputs)}, output length: {len(outputs)}&#39;) print(f&#39;first item shape: {outputs[0].shape}&#39;) print(f&#39;second item shape: {outputs[1].shape}&#39;) . output type: &lt;class &#39;tuple&#39;&gt;, output length: 2 first item shape: torch.Size([1, 9, 768]) second item shape: torch.Size([1, 768]) . In the examples above, we used BERT to handle some useful tasks, such as text classification, named entity recognition, or question answering. For each of those tasks, a task-specific model head was added on top of raw model outputs. Here, we are dealing with the raw model outputs - we need to understand them to be able to add custom heads to solve our own, specific tasks. . The model outputs a tuple. The first item of the tuple has the following shape: 1 (batch size) x 9 (sequence length) x 768 (the number of hidden units). This is called the sequence output, and it provides the representation of each token in the context of other tokens in the sequence. If we&#39;d like to fine-tune our model for named entity recognition, we will use this output and expect the 768 numbers representing each token in a sequence to inform us if the token corresponds to a named entity. . Tbe second item in the tuple has the shape: 1 (batch size) x 768 (the number of hidden units). It is called the pooled output, and in theory it should represent the entire sequence. It corresponds to the first token in a sequence (the [CLS] token). We can use it for example in a text classification task - for example when we fine-tune the model for sentiment classification, we&#39;d expect the 768 hidden units of the pooled output to capture the sentiment of the text. . In practice, we may want to use some other way to capture the meaning of the sequence, for example by averaging the sequence output, or even concatenating the hidden states from lower levels. . How was BERT trained? . The models we have been using so far have already been pre-trained, and in some cases fine-tuned as well. What does this actually mean? . Pre-training . In order for a model to solve an NLP task, like sentiment classification, it needs to understand a lot about language. Most of the labelled datasets that we have available are too small to teach our model enough about language. Ideally, we&#39;d like to use all the text we have available, for example all books and the internet. Because it&#39;s hard to label so much text, we create &#39;fake tasks&#39; that will help us achieve our goal without manual labelling. . BERT is trained on a very large corpus using two &#39;fake tasks&#39;: masked language modeling (MLM) and next sentence prediction (NSP). In MLM, we randomly hide some tokens in a sequence, and ask the model to predict which tokens are missing. In NSP, we provide our model with two sentences, and ask it to predict if the second sentence follows the first one in our corpus. The intent of these tasks is for our model to be able to represent the meaning of both individual words, and the entire sentences. . nlp = pipeline(&quot;fill-mask&quot;) preds = nlp(f&quot;I am exhausted, it&#39;s been a very {nlp.tokenizer.mask_token} day.&quot;) print(&#39;I am exhausted, it &#39;s been a very ***** day.&#39;) for p in preds: print(nlp.tokenizer.decode([p[&#39;token&#39;]])) preds = nlp(f&quot;I am excited, it&#39;s been a very {nlp.tokenizer.mask_token} day.&quot;) print(&#39;I am excited, it &#39;s been a very ***** day.&#39;) for p in preds: print(nlp.tokenizer.decode([p[&#39;token&#39;]])) . I am exhausted, it&#39;s been a very ***** day. busy exhausting stressful taxing rough I am excited, it&#39;s been a very ***** day. busy exciting productive good nice . tokenizer = BertTokenizer.from_pretrained(&#39;bert-base-uncased&#39;) model = BertForNextSentencePrediction.from_pretrained(&#39;bert-base-uncased&#39;) first_sentence = &quot;I cut my finger.&quot; second_sentence_right = &quot;The blood started flowing.&quot; second_sentence_wrong = &quot;This website uses cookies.&quot; right = tokenizer.encode_plus(first_sentence, text_pair=second_sentence_right) wrong = tokenizer.encode_plus(first_sentence, text_pair=second_sentence_wrong) r1, r2, r3 = torch.tensor(right[&#39;input_ids&#39;]).unsqueeze(0), torch.tensor(right[&#39;token_type_ids&#39;]).unsqueeze(0), torch.tensor(right[&#39;attention_mask&#39;]).unsqueeze(0) w1, w2, w3 = torch.tensor(wrong[&#39;input_ids&#39;]).unsqueeze(0), torch.tensor(wrong[&#39;token_type_ids&#39;]).unsqueeze(0), torch.tensor(wrong[&#39;attention_mask&#39;]).unsqueeze(0) right_outputs = model(input_ids=r1, token_type_ids=r2, attention_mask=r3) right_seq_relationship_scores = right_outputs[0] wrong_outputs = model(input_ids=w1, token_type_ids=w2, attention_mask=w3) wrong_seq_relationship_scores = wrong_outputs[0] print(first_sentence + &#39; &#39; + second_sentence_right) print(f&#39;Next sentence prediction: {right_seq_relationship_scores.detach().numpy().flatten()[0] &gt; 0}&#39;) print(first_sentence + &#39; &#39; + second_sentence_wrong) print(f&#39;Next sentence prediction: {wrong_seq_relationship_scores.detach().numpy().flatten()[0] &gt; 0}&#39;) . I cut my finger. The blood started flowing. Next sentence prediction: True I cut my finger. This website uses cookies. Next sentence prediction: False . Finetuning . As we can see from the examples above, BERT has learned quite a lot about language during pretraining. That knowledge is represented in its outputs - the hidden units corresponding to tokens in a sequence. We can use that knowledge by adding our own, custom layers on top of BERT outputs, and further training (finetuning) on our own data. . How does BERT really work? . If training a model is like training a dog, then understanding the internals of BERT is like understanding the anatomy of a dog. It&#39;s not required to effectively train a model, but it can be helpful if you want to do some really advanced stuff, or if you want to understand the limits of what is possible. . I will only scratch the surface here by showing the key ingredients of BERT architecture, and at the end I will point to some additional resources I have found very helpful. . Let&#39;s start by loading up basic BERT configuration and looking what&#39;s inside. . config = BertConfig() config . BertConfig { &#34;attention_probs_dropout_prob&#34;: 0.1, &#34;hidden_act&#34;: &#34;gelu&#34;, &#34;hidden_dropout_prob&#34;: 0.1, &#34;hidden_size&#34;: 768, &#34;initializer_range&#34;: 0.02, &#34;intermediate_size&#34;: 3072, &#34;layer_norm_eps&#34;: 1e-12, &#34;max_position_embeddings&#34;: 512, &#34;model_type&#34;: &#34;bert&#34;, &#34;num_attention_heads&#34;: 12, &#34;num_hidden_layers&#34;: 12, &#34;pad_token_id&#34;: 0, &#34;type_vocab_size&#34;: 2, &#34;vocab_size&#34;: 30522 } . This configuration file lists the key dimensions that determine the size of the model: . 768 hidden size is the number of floats in a vector representing each token in the vocabulary | 30522 is the vocabulary size | We can deal with max 512 tokens in a sequence | The initial embeddings will go through 12 layers of computation, including the application of 12 attention heads and a dense layer with 3072 hidden units, to produce our final output, which will again be a vector with 768 units per token | . Let&#39;s briefly look at each major building block of the model architecture. We start with the embedding layer, which maps each vocabulary token to the 768-long embedding. . model = BertModel(config) print(model.embeddings) . BertEmbeddings( (word_embeddings): Embedding(30522, 768, padding_idx=0) (position_embeddings): Embedding(512, 768) (token_type_embeddings): Embedding(2, 768) (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True) (dropout): Dropout(p=0.1, inplace=False) ) . Then, we pass the embeddings through 12 layers of computation. This starts with self-attention, is followed by an intermediate dense layer with hidden size 3072, and ends with sequence output that we have already seen above. Usually, we will deal with the last hidden state, i.e. the 12th layer. However, to achieve better results, we may sometimes use the layers below as well to represent our sequences, for example by concatenating the last 4 hidden states. . print(f&#39;There are {len(model.encoder.layer)} layers like this in the model architecture:&#39;) print(&#39;&#39;) print(model.encoder.layer[0]) . There are 12 layers like this in the model architecture: BertLayer( (attention): BertAttention( (self): BertSelfAttention( (query): Linear(in_features=768, out_features=768, bias=True) (key): Linear(in_features=768, out_features=768, bias=True) (value): Linear(in_features=768, out_features=768, bias=True) (dropout): Dropout(p=0.1, inplace=False) ) (output): BertSelfOutput( (dense): Linear(in_features=768, out_features=768, bias=True) (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True) (dropout): Dropout(p=0.1, inplace=False) ) ) (intermediate): BertIntermediate( (dense): Linear(in_features=768, out_features=3072, bias=True) ) (output): BertOutput( (dense): Linear(in_features=3072, out_features=768, bias=True) (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True) (dropout): Dropout(p=0.1, inplace=False) ) ) . Finally, we have the pooled output, which is used in pre-training for the NSP task, and corresponds to the [CLS] token hidden state that goes through another linear layer. . print(model.pooler) . BertPooler( (dense): Linear(in_features=768, out_features=768, bias=True) (activation): Tanh() ) . In this overview, I haven&#39;t explained at all the self-attention mechanism, or the detailed inner workings of BERT. If you&#39;d like to read further, here are some materials that I have found very useful. . Chris Mccormick BERT Research Series on Youtube | Jay Alammar A Visual Guide to Using BERT for the First Time | Jay Alammar The Illustrated Transformer | Peter Bloem Transformers from Scratch | .",
            "url": "https://skok.ai/2020/05/11/Top-Down-Introduction-to-BERT.html",
            "relUrl": "/2020/05/11/Top-Down-Introduction-to-BERT.html",
            "date": " • May 11, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "My Transition Into Data Science",
            "content": "For the last couple of years, I’ve been fascinated by the progress of machine learning, and the potential applications it enables. I started a journey of learning, building, researching and designing machine learning applications. In this post, I will share my approach and plans for the future. . Getting started . I started learning a few years ago with the classic Coursera Machine Learning course by Andrew Ng. It got me hooked, stirred up my interest in machine learning, provided an intuition into the way it works, but left largely unable to do anything practical about it - if only for the reason that it was based on Octave. I needed a practical challenge, so after my daughter was born, I planned to build an app that would generate nursery rhymes in Polish. I went through the Deep Learning specialisation on Coursera, again by Andrew Ng, which was much more hands on and practical. I experimented with LSTMs to generate the rhymes, found out a lot of practical limitations around machine learning, and ultimately shipped the app - although in the background it used an N-gram based language model, a much more traditional technique. . Another breakthrough in my personal journey was discovering Fast.ai. The courses, the library, the community, and specifically the advice from Fast.ai crew: Jeremy Howard, Rachel Thomas, and Sylvain Gugger, gave me a whole new level of practical skills, understanding and motivation to apply machine learning. It keeps amazing me how we can learn from some of the best teachers in the world, and I’m very grateful for that. . Practice, practice, practice . Outside of my family and machine learning, my great passion is kung fu, so I’m used to regular practice and continuous improvement. In a typical sifu/sensei fashion, Jeremy Howard keeps advising to practice machine learning, experiment with code, develop applications, join Kaggle competitions. For me, Kaggle in particular was a huge boost to my skill level and confidence. I got to develop solutions to practical business problems, including localisation of steel defects, fraud detection, natural question answering and many more. Kaggle platform provides a great way to get started, via starter notebooks and solutions shared by the community, and it provides a way to keep learning and improving by analyzing the final solutions shared by the winning teams. Getting ranked on Kaggle is also a very good credential, in particular for people like me who moved into data science from a different field. . Applications . I’m lucky that my job, which is about identifying and executing ideas to transform business processes with technology, allows me to benefit from my machine learning skills and apply them. I’ve gradually transitioned from a pure manager role to half-manager, half-hands-on practitioner, which I feel results in a higher ROI on my salary and is also much more interesting. Applying machine learning in a big company is subject to multiple constraints though (which is a very sensible approach). I’m compensating for this by working on more ‘crazy’ projects outside of work, which includes some research and some potentially commercial applications, that I’m hoping to reveal in the future. . Blogging . Rachel Thomas wrote a great blog post about blogging. I feel like I’m already late to get this started, but it’s still better to do it now. I’ll keep sharing my learnings, insights, and projects on this blog. I’m especially interested in applying NLP to Polish language, and related applications, so if you’re interested in these topics, do follow me on Twitter! .",
            "url": "https://skok.ai/learning/applications/2020/05/09/discovering-the-potential-of-machine-learning.html",
            "relUrl": "/learning/applications/2020/05/09/discovering-the-potential-of-machine-learning.html",
            "date": " • May 9, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "My name is Darek Kłeczek, and I like to solve practical problems with machine learning. I blog about these applications here. Sometimes, solving a practical problem requires understanding the fundamentals of machine learning. I blog here about some of the concepts that took me a while to understand. .",
          "url": "https://skok.ai/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://skok.ai/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}